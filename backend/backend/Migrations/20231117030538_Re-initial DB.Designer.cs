// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

namespace backend.Migrations
{
    [DbContext(typeof(FBlogAcademyContext))]
    [Migration("20231117030538_Re-initial DB")]
    partial class ReinitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("backend.Models.FollowUser", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("follower_id");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int")
                        .HasColumnName("followed_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("FollowerId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("FollowUser");
                });

            modelBuilder.Entity("backend.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("major_name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MajorName")
                        .IsUnique();

                    b.ToTable("Major");
                });

            modelBuilder.Entity("backend.Models.MajorSubject", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("major_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("SubjectId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("MajorSubject");
                });

            modelBuilder.Entity("backend.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("reviewer_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("backend.Models.PostList", b =>
                {
                    b.Property<int>("SaveListId")
                        .HasColumnType("int")
                        .HasColumnName("save_list_id");

                    b.Property<int>("SavePostId")
                        .HasColumnType("int")
                        .HasColumnName("save_post_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("SaveListId", "SavePostId");

                    b.HasIndex("SavePostId");

                    b.ToTable("PostList");
                });

            modelBuilder.Entity("backend.Models.PostMajor", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("major_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("PostId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("PostMajor");
                });

            modelBuilder.Entity("backend.Models.PostSubject", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("PostId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PostSubject");
                });

            modelBuilder.Entity("backend.Models.ReportPost", b =>
                {
                    b.Property<int>("ReporterId")
                        .HasColumnType("int")
                        .HasColumnName("reporter_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("status");

                    b.HasKey("ReporterId", "PostId");

                    b.HasIndex("AdminId");

                    b.HasIndex("PostId");

                    b.ToTable("ReportPost");
                });

            modelBuilder.Entity("backend.Models.SaveList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SaveList");
                });

            modelBuilder.Entity("backend.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subject_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SubjectName")
                        .IsUnique();

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAwarded")
                        .HasColumnType("bit")
                        .HasColumnName("is_awarded");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("role");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164D120EBFA")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("backend.Models.UserMajor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("major_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("UserId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("UserMajor");
                });

            modelBuilder.Entity("backend.Models.UserSubject", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("UserId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("UserSubject");
                });

            modelBuilder.Entity("backend.Models.VoteComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<int>("Vote")
                        .HasColumnType("int")
                        .HasColumnName("vote");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("VoteComment");
                });

            modelBuilder.Entity("backend.Models.VotePost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("Vote")
                        .HasColumnType("int")
                        .HasColumnName("vote");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("VotePost");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKComment632288")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKComment400844")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.FollowUser", b =>
                {
                    b.HasOne("backend.Models.User", "Followed")
                        .WithMany("FollowUserFolloweds")
                        .HasForeignKey("FollowedId")
                        .HasConstraintName("FKFollowUser783758")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Follower")
                        .WithMany("FollowUserFollowers")
                        .HasForeignKey("FollowerId")
                        .HasConstraintName("FKFollowUser200833")
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("backend.Models.MajorSubject", b =>
                {
                    b.HasOne("backend.Models.Major", "Major")
                        .WithMany("MajorSubjects")
                        .HasForeignKey("MajorId")
                        .HasConstraintName("FKMajorSu611140")
                        .IsRequired();

                    b.HasOne("backend.Models.Subject", "Subject")
                        .WithMany("MajorSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FKMajorSu484641")
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("backend.Models.Media", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("MediaPosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKMedia400844")
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.HasOne("backend.Models.User", "Reviewer")
                        .WithMany("PostReviewers")
                        .HasForeignKey("ReviewerId")
                        .HasConstraintName("FKPost548405");

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("PostUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKPost990072")
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.PostList", b =>
                {
                    b.HasOne("backend.Models.SaveList", "SaveList")
                        .WithMany("PostLists")
                        .HasForeignKey("SaveListId")
                        .HasConstraintName("FKPostList365782")
                        .IsRequired();

                    b.HasOne("backend.Models.Post", "SavePost")
                        .WithMany("PostLists")
                        .HasForeignKey("SavePostId")
                        .HasConstraintName("FKPostList86128")
                        .IsRequired();

                    b.Navigation("SaveList");

                    b.Navigation("SavePost");
                });

            modelBuilder.Entity("backend.Models.PostMajor", b =>
                {
                    b.HasOne("backend.Models.Major", "Major")
                        .WithMany("PostMajors")
                        .HasForeignKey("MajorId")
                        .HasConstraintName("FKPostCatego136719")
                        .IsRequired();

                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("PostMajors")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKPostCatego519402")
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("backend.Models.PostSubject", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("PostSubjects")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKPostSubject716835")
                        .IsRequired();

                    b.HasOne("backend.Models.Subject", "Subject")
                        .WithMany("PostSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FKPostSubject277175")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("backend.Models.ReportPost", b =>
                {
                    b.HasOne("backend.Models.User", "Admin")
                        .WithMany("ReportPostAdmins")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FKReportPost712211");

                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("ReportPosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKReportPost960109")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Reporter")
                        .WithMany("ReportPostReporters")
                        .HasForeignKey("ReporterId")
                        .HasConstraintName("FKReportPost680973")
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Post");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("backend.Models.SaveList", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("SaveLists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKSaveList283598")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.UserMajor", b =>
                {
                    b.HasOne("backend.Models.Major", "Major")
                        .WithMany("UserMajors")
                        .HasForeignKey("MajorId")
                        .HasConstraintName("FKUserCatego136719")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("UserMajors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKUserCatego519402")
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.UserSubject", b =>
                {
                    b.HasOne("backend.Models.Subject", "Subject")
                        .WithMany("UserSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FKUserSubject136719")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("UserSubjects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKUserSubject519402")
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.VoteComment", b =>
                {
                    b.HasOne("backend.Models.Comment", "Comment")
                        .WithMany("VoteComments")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FKVoteCommen971268")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("VoteComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKVoteCommen692680")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.VotePost", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("VotePosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKVotePost439037")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("VotePosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKVotePost207593")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.Navigation("VoteComments");
                });

            modelBuilder.Entity("backend.Models.Major", b =>
                {
                    b.Navigation("MajorSubjects");

                    b.Navigation("PostMajors");

                    b.Navigation("UserMajors");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MediaPosts");

                    b.Navigation("PostLists");

                    b.Navigation("PostMajors");

                    b.Navigation("PostSubjects");

                    b.Navigation("ReportPosts");

                    b.Navigation("VotePosts");
                });

            modelBuilder.Entity("backend.Models.SaveList", b =>
                {
                    b.Navigation("PostLists");
                });

            modelBuilder.Entity("backend.Models.Subject", b =>
                {
                    b.Navigation("MajorSubjects");

                    b.Navigation("PostSubjects");

                    b.Navigation("UserSubjects");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FollowUserFolloweds");

                    b.Navigation("FollowUserFollowers");

                    b.Navigation("PostReviewers");

                    b.Navigation("PostUsers");

                    b.Navigation("ReportPostAdmins");

                    b.Navigation("ReportPostReporters");

                    b.Navigation("SaveLists");

                    b.Navigation("UserMajors");

                    b.Navigation("UserSubjects");

                    b.Navigation("VoteComments");

                    b.Navigation("VotePosts");
                });
#pragma warning restore 612, 618
        }
    }
}
