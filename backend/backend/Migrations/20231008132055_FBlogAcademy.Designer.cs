// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

namespace backend.Migrations
{
    [DbContext(typeof(FBlogAcademyContext))]
    [Migration("20231008132055_FBlogAcademy")]
    partial class FBlogAcademy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("backend.Models.CategoryTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.HasKey("TagId", "CategoryId")
                        .HasName("PK__Category__1FC24C2DF9CCDA7D");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTag");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("backend.Models.FollowUser", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("follower_id");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int")
                        .HasColumnName("followed_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("FollowerId", "FollowedId")
                        .HasName("PK__FollowUs__838707A3A1740FC4");

                    b.HasIndex("FollowedId");

                    b.ToTable("FollowUser");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<bool?>("IsSaved")
                        .HasColumnType("bit")
                        .HasColumnName("is_saved");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("reviewer_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("backend.Models.PostCategory", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.HasKey("PostId", "CategoryId")
                        .HasName("PK__PostCate__638369FD53652869");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("backend.Models.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("backend.Models.PostList", b =>
                {
                    b.Property<int>("SaveListId")
                        .HasColumnType("int")
                        .HasColumnName("save_list_id");

                    b.Property<int>("SavePostId")
                        .HasColumnType("int")
                        .HasColumnName("save_post_id");

                    b.HasKey("SaveListId", "SavePostId")
                        .HasName("PK__PostList__859A5D1B2A301E66");

                    b.HasIndex("SavePostId");

                    b.ToTable("PostList");
                });

            modelBuilder.Entity("backend.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("PostId", "TagId")
                        .HasName("PK__PostTag__4AFEED4DAD483322");

                    b.HasIndex("TagId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("backend.Models.PostVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostVideo");
                });

            modelBuilder.Entity("backend.Models.ReportPost", b =>
                {
                    b.Property<int>("ReporterId")
                        .HasColumnType("int")
                        .HasColumnName("reporter_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("status")
                        .IsFixedLength(true);

                    b.HasKey("ReporterId", "PostId")
                        .HasName("PK__ReportPo__39154D75FBC281C9");

                    b.HasIndex("AdminId");

                    b.HasIndex("PostId");

                    b.ToTable("ReportPost");
                });

            modelBuilder.Entity("backend.Models.SaveList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SaveList");
                });

            modelBuilder.Entity("backend.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tag_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsAwarded")
                        .HasColumnType("bit")
                        .HasColumnName("is_awarded");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("role")
                        .IsFixedLength(true);

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E61641EB2184B")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("backend.Models.VoteComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool?>("DownVote")
                        .HasColumnType("bit")
                        .HasColumnName("down_vote");

                    b.Property<bool?>("UpVote")
                        .HasColumnType("bit")
                        .HasColumnName("up_vote");

                    b.HasKey("UserId", "CommentId")
                        .HasName("PK__VoteComm__D7C76067CAA69F76");

                    b.HasIndex("CommentId");

                    b.ToTable("VoteComment");
                });

            modelBuilder.Entity("backend.Models.VotePost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("DownVote")
                        .HasColumnType("bit")
                        .HasColumnName("down_vote");

                    b.Property<bool?>("UpVote")
                        .HasColumnType("bit")
                        .HasColumnName("up_vote");

                    b.HasKey("UserId", "PostId")
                        .HasName("PK__VotePost__CA534F7969D23565");

                    b.HasIndex("PostId");

                    b.ToTable("VotePost");
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.HasOne("backend.Models.User", "Admin")
                        .WithMany("Categories")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FKCategory311908")
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("backend.Models.CategoryTag", b =>
                {
                    b.HasOne("backend.Models.Category", "Category")
                        .WithMany("CategoryTags")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FKCategoryTa611140")
                        .IsRequired();

                    b.HasOne("backend.Models.Tag", "Tag")
                        .WithMany("CategoryTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FKCategoryTa484641")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKComment632288")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKComment400844")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.FollowUser", b =>
                {
                    b.HasOne("backend.Models.User", "Followed")
                        .WithMany("FollowUserFolloweds")
                        .HasForeignKey("FollowedId")
                        .HasConstraintName("FKFollowUser783758")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Follower")
                        .WithMany("FollowUserFollowers")
                        .HasForeignKey("FollowerId")
                        .HasConstraintName("FKFollowUser200833")
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.HasOne("backend.Models.User", "Reviewer")
                        .WithMany("PostReviewers")
                        .HasForeignKey("ReviewerId")
                        .HasConstraintName("FKPost548405")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("PostUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKPost990072")
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.PostCategory", b =>
                {
                    b.HasOne("backend.Models.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FKPostCatego136719")
                        .IsRequired();

                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKPostCatego519402")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("backend.Models.PostImage", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKPostImage282377")
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("backend.Models.PostList", b =>
                {
                    b.HasOne("backend.Models.SaveList", "SaveList")
                        .WithMany("PostLists")
                        .HasForeignKey("SaveListId")
                        .HasConstraintName("FKPostList365782")
                        .IsRequired();

                    b.HasOne("backend.Models.Post", "SavePost")
                        .WithMany("PostLists")
                        .HasForeignKey("SavePostId")
                        .HasConstraintName("FKPostList86128")
                        .IsRequired();

                    b.Navigation("SaveList");

                    b.Navigation("SavePost");
                });

            modelBuilder.Entity("backend.Models.PostTag", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKPostTag716835")
                        .IsRequired();

                    b.HasOne("backend.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FKPostTag277175")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend.Models.PostVideo", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("PostVideos")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKPostVideo392925")
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("backend.Models.ReportPost", b =>
                {
                    b.HasOne("backend.Models.User", "Admin")
                        .WithMany("ReportPostAdmins")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FKReportPost712211")
                        .IsRequired();

                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("ReportPosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKReportPost960109")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Reporter")
                        .WithMany("ReportPostReporters")
                        .HasForeignKey("ReporterId")
                        .HasConstraintName("FKReportPost680973")
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Post");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("backend.Models.SaveList", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("SaveLists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKSaveList283598")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Tag", b =>
                {
                    b.HasOne("backend.Models.User", "Admin")
                        .WithMany("Tags")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FKTag383419")
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("backend.Models.VoteComment", b =>
                {
                    b.HasOne("backend.Models.Comment", "Comment")
                        .WithMany("VoteComments")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FKVoteCommen971268")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("VoteComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKVoteCommen692680")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.VotePost", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("VotePosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FKVotePost439037")
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("VotePosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKVotePost207593")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Navigation("CategoryTags");

                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.Navigation("VoteComments");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostImages");

                    b.Navigation("PostLists");

                    b.Navigation("PostTags");

                    b.Navigation("PostVideos");

                    b.Navigation("ReportPosts");

                    b.Navigation("VotePosts");
                });

            modelBuilder.Entity("backend.Models.SaveList", b =>
                {
                    b.Navigation("PostLists");
                });

            modelBuilder.Entity("backend.Models.Tag", b =>
                {
                    b.Navigation("CategoryTags");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");

                    b.Navigation("FollowUserFolloweds");

                    b.Navigation("FollowUserFollowers");

                    b.Navigation("PostReviewers");

                    b.Navigation("PostUsers");

                    b.Navigation("ReportPostAdmins");

                    b.Navigation("ReportPostReporters");

                    b.Navigation("SaveLists");

                    b.Navigation("Tags");

                    b.Navigation("VoteComments");

                    b.Navigation("VotePosts");
                });
#pragma warning restore 612, 618
        }
    }
}
